name: Unified Build and Push

on:
  workflow_call:
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  build-shared-amd64:
    name: Build AMD64 (Shared for GHCR + ECR)
    runs-on: linux-x64-8-core
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      fail-fast: false
      matrix:
        include:
          - dockerfile: ./docker/app.Dockerfile
            ghcr_image: ghcr.io/simstudioai/simstudio
            ecr_repo_secret: ECR_APP
          - dockerfile: ./docker/db.Dockerfile
            ghcr_image: ghcr.io/simstudioai/migrations
            ecr_repo_secret: ECR_MIGRATIONS
          - dockerfile: ./docker/realtime.Dockerfile
            ghcr_image: ghcr.io/simstudioai/realtime
            ecr_repo_secret: ECR_REALTIME
    outputs:
      registry: ${{ steps.login-ecr.outputs.registry }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: useblacksmith/setup-docker-builder@v1

      - name: Generate tags
        id: meta
        run: |
          ECR_REGISTRY="${{ steps.login-ecr.outputs.registry }}"
          ECR_REPO="${{ secrets[matrix.ecr_repo_secret] }}"
          GHCR_IMAGE="${{ matrix.ghcr_image }}"

          # ECR tags
          ECR_IMAGE="${ECR_REGISTRY}/${ECR_REPO}:latest"

          # GHCR tags
          GHCR_AMD64="${GHCR_IMAGE}:latest-amd64"
          GHCR_SHA="${GHCR_IMAGE}:${{ github.sha }}-amd64"

          echo "ecr_image=${ECR_IMAGE}" >> $GITHUB_OUTPUT
          echo "ghcr_tags=${GHCR_AMD64},${GHCR_SHA}" >> $GITHUB_OUTPUT

      - name: Build and push to both registries
        uses: useblacksmith/build-push-action@v2
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          platforms: linux/amd64
          push: true
          tags: |
            ${{ steps.meta.outputs.ecr_image }}
            ${{ steps.meta.outputs.ghcr_tags }}
          provenance: false
          sbom: false

  build-ghcr-arm64:
    name: Build ARM64 (GHCR Only)
    runs-on: linux-arm64-8-core
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      fail-fast: false
      matrix:
        include:
          - dockerfile: ./docker/app.Dockerfile
            image: ghcr.io/simstudioai/simstudio
          - dockerfile: ./docker/db.Dockerfile
            image: ghcr.io/simstudioai/migrations
          - dockerfile: ./docker/realtime.Dockerfile
            image: ghcr.io/simstudioai/realtime

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: useblacksmith/setup-docker-builder@v1

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ matrix.image }}
          tags: |
            type=raw,value=latest-arm64
            type=sha,format=long,suffix=-arm64

      - name: Build and push ARM64 to GHCR
        uses: useblacksmith/build-push-action@v2
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          platforms: linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          provenance: false
          sbom: false

  update-ecs-services:
    name: Update ECS Services
    needs: build-shared-amd64
    runs-on: blacksmith-4vcpu-ubuntu-2404
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      fail-fast: false
      matrix:
        stack_type: [APP, CORE, MONITORING]

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Determine stack and image details
        id: stack
        run: |
          ECR_REGISTRY="${{ needs.build-shared-amd64.outputs.registry }}"

          # Map stack type to ECR repo
          case "${{ matrix.stack_type }}" in
            APP)
              ECR_REPO="${{ secrets.ECR_APP }}"
              ;;
            CORE)
              ECR_REPO="${{ secrets.ECR_MIGRATIONS }}"
              ;;
            MONITORING)
              ECR_REPO="${{ secrets.ECR_REALTIME }}"
              ;;
          esac

          IMAGE_URI="${ECR_REGISTRY}/${ECR_REPO}:latest"
          echo "image=$IMAGE_URI" >> $GITHUB_OUTPUT

      - name: Get stack name
        id: stack-name
        run: |
          APP_STACK="${{ secrets.PROD_APP_STACK }}"
          CORE_STACK="${{ secrets.PROD_CORE_STACK }}"
          MONITORING_STACK="${{ secrets.PROD_MONITORING_STACK }}"

          case "${{ matrix.stack_type }}" in
            APP)
              STACK_NAME="$APP_STACK"
              ;;
            CORE)
              STACK_NAME="$CORE_STACK"
              ;;
            MONITORING)
              STACK_NAME="$MONITORING_STACK"
              ;;
          esac

          echo "name=$STACK_NAME" >> $GITHUB_OUTPUT

      - name: Get ECS services from stack
        id: ecs-services
        run: |
          SERVICES=$(aws cloudformation describe-stack-resources \
            --stack-name "${{ steps.stack-name.outputs.name }}" \
            --query "StackResources[?ResourceType=='AWS::ECS::Service'].PhysicalResourceId" \
            --output text 2>/dev/null || echo "")

          if [ -z "$SERVICES" ]; then
            echo "services=" >> $GITHUB_OUTPUT
          else
            echo "services=$SERVICES" >> $GITHUB_OUTPUT
          fi

      - name: Update ECS services
        if: steps.ecs-services.outputs.services != ''
        run: |
          SERVICES="${{ steps.ecs-services.outputs.services }}"

          for SERVICE_ARN in $SERVICES; do
            CLUSTER_NAME=$(echo $SERVICE_ARN | cut -d'/' -f2)
            SERVICE_NAME=$(echo $SERVICE_ARN | cut -d'/' -f3)

            TASK_DEF_ARN=$(aws ecs describe-services \
              --cluster "$CLUSTER_NAME" \
              --services "$SERVICE_NAME" \
              --query "services[0].taskDefinition" \
              --output text)

            TASK_DEF=$(aws ecs describe-task-definition \
              --task-definition "$TASK_DEF_ARN" \
              --query "taskDefinition")

            NEW_TASK_DEF=$(echo "$TASK_DEF" | jq --arg IMAGE "${{ steps.stack.outputs.image }}" \
              '.containerDefinitions |= map(
                if .essential == true then
                  .image = $IMAGE
                else . end
              ) |
              del(.taskDefinitionArn) |
              del(.revision) |
              del(.status) |
              del(.requiresAttributes) |
              del(.compatibilities) |
              del(.registeredAt) |
              del(.registeredBy)')

            NEW_TASK_ARN=$(aws ecs register-task-definition \
              --cli-input-json "$NEW_TASK_DEF" \
              --query "taskDefinition.taskDefinitionArn" \
              --output text)

            aws ecs update-service \
              --cluster "$CLUSTER_NAME" \
              --service "$SERVICE_NAME" \
              --task-definition "$NEW_TASK_ARN" \
              --force-new-deployment
          done

      - name: Wait for service stability
        if: steps.ecs-services.outputs.services != ''
        run: |
          SERVICES="${{ steps.ecs-services.outputs.services }}"

          for SERVICE_ARN in $SERVICES; do
            CLUSTER_NAME=$(echo $SERVICE_ARN | cut -d'/' -f2)
            SERVICE_NAME=$(echo $SERVICE_ARN | cut -d'/' -f3)

            ATTEMPTS=0
            MAX_ATTEMPTS=120
            while [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
              DEPLOYMENT_STATUS=$(aws ecs describe-services \
                --cluster "$CLUSTER_NAME" \
                --services "$SERVICE_NAME" \
                --query "services[0].deployments[?status=='PRIMARY'].rolloutState" \
                --output text)

              if [ "$DEPLOYMENT_STATUS" = "COMPLETED" ]; then
                echo "âœ… Service $SERVICE_NAME updated successfully!"
                break
              fi

              sleep 15
              ATTEMPTS=$((ATTEMPTS+1))
            done
          done

  create-ghcr-manifests:
    name: Create GHCR Manifests
    runs-on: blacksmith-4vcpu-ubuntu-2404
    needs: [build-shared-amd64, build-ghcr-arm64]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix:
        include:
          - image: ghcr.io/simstudioai/simstudio
          - image: ghcr.io/simstudioai/migrations
          - image: ghcr.io/simstudioai/realtime
    permissions:
      contents: read
      packages: write

    steps:
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push manifest
        run: |
          IMAGE_BASE="${{ matrix.image }}"

          # Create latest manifest
          docker manifest create "${IMAGE_BASE}:latest" \
            "${IMAGE_BASE}:latest-amd64" \
            "${IMAGE_BASE}:latest-arm64"
          docker manifest push "${IMAGE_BASE}:latest"

          # Create SHA manifest
          docker manifest create "${IMAGE_BASE}:${{ github.sha }}" \
            "${IMAGE_BASE}:${{ github.sha }}-amd64" \
            "${IMAGE_BASE}:${{ github.sha }}-arm64"
          docker manifest push "${IMAGE_BASE}:${{ github.sha }}"